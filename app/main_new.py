import streamlit as st
import pandas as pd
import requests
import urllib3
from database import BusinessDatabase
from io import BytesIO
import base64
import os

# T·∫Øt c·∫£nh b√°o SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Map tr·∫°ng th√°i
TRANG_THAI = {
    "00": "ƒêang ho·∫°t ƒë·ªông",
    "01": "NNT ng·ª´ng ho·∫°t ƒë·ªông v√† ƒê√É HO√ÄN TH√ÄNH th·ªß t·ª•c ch·∫•m d·ª©t hi·ªáu l·ª±c MST",
    "02": "NNT ƒë√£ chuy·ªÉn c∆° quan thu·∫ø qu·∫£n l√Ω",
    "03": "NNT ng·ª´ng ho·∫°t ƒë·ªông nh∆∞ng CH∆ØA HO√ÄN TH√ÄNH th·ªß t·ª•c ch·∫•m d·ª©t hi·ªáu l·ª±c MST",
    "04": "NNT ƒëang ho·∫°t ƒë·ªông (√°p d·ª•ng cho h·ªô kinh doanh, c√° nh√¢n kinh doanh ch∆∞a ƒë·ªß th√¥ng tin ƒëƒÉng k√Ω thu·∫ø)",
    "05": "NNT t·∫°m ng·ª´ng ho·∫°t ƒë·ªông, kinh doanh",
    "06": "Kh√¥ng ho·∫°t ƒë·ªông t·∫°i ƒë·ªãa ch·ªâ ƒë√£ ƒëƒÉng k√Ω",
    "07": "NNT ch·ªù l√†m th·ªß t·ª•c ph√° s·∫£n"
}

# M√†u s·∫Øc cho tr·∫°ng th√°i
STATUS_COLORS = {
    "00": "status-active",    # ƒêang ho·∫°t ƒë·ªông
    "04": "status-active",    # ƒêang ho·∫°t ƒë·ªông (h·ªô kinh doanh)
    "05": "status-warning",   # T·∫°m ng·ª´ng
    "01": "status-danger",    # ƒê√£ ch·∫•m d·ª©t
    "03": "status-danger",    # Ng·ª´ng ho·∫°t ƒë·ªông ch∆∞a ho√†n th√†nh
    "06": "status-danger",    # Kh√¥ng ho·∫°t ƒë·ªông t·∫°i ƒë·ªãa ch·ªâ
    "07": "status-danger",    # Ch·ªù ph√° s·∫£n
    "02": "status-info"       # ƒê√£ chuy·ªÉn CQT
}

def get_status_description(status_code):
    """L·∫•y m√¥ t·∫£ tr·∫°ng th√°i t·ª´ m√£"""
    return TRANG_THAI.get(status_code, "Kh√¥ng x√°c ƒë·ªãnh")

def get_status_class(status_code):
    """L·∫•y class CSS cho tr·∫°ng th√°i"""
    return STATUS_COLORS.get(status_code, "status-info")

def load_css():
    """Load CSS t·ª´ file"""
    css_file = os.path.join(os.path.dirname(__file__), "style.css")
    with open(css_file, "r", encoding="utf-8") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

def lookup_business(mst):
    """H√†m tra c·ª©u th√¥ng tin doanh nghi·ªáp t·ª´ API"""
    try:
        url = f"https://hoadondientu.gdt.gov.vn:30000/category/public/dsdkts/{mst}/manager"
        response = requests.get(url, verify=False)
        return response.json()
    except Exception as e:
        st.error(f"L·ªói khi tra c·ª©u MST {mst}: {str(e)}")
        return None

def display_business_info(data):
    """Hi·ªÉn th·ªã th√¥ng tin doanh nghi·ªáp v·ªõi giao di·ªán hi·ªán ƒë·∫°i"""
    if data:
        db = BusinessDatabase()

        # L·∫•y th√¥ng tin tr·∫°ng th√°i v√† c·∫£nh b√°o
        status_code = data.get('tthai', 'N/A')
        status_desc = get_status_description(status_code)
        status_class = get_status_class(status_code)

        # T·∫°o bi·ªÉu t∆∞·ª£ng tr·∫°ng th√°i
        if status_code == "00" or status_code == "04":
            status_icon = "‚úÖ"
        elif status_code == "05":
            status_icon = "‚ö†Ô∏è"
        elif status_code in ["06", "07", "03"]:
            status_icon = "‚ùå"
        else:
            status_icon = "‚ÑπÔ∏è"

        # Ki·ªÉm tra blacklist
        blacklist_info = db.get_blacklist_info(data.get('mst'))

        # T·∫°o card th√¥ng tin c∆° b·∫£n
        st.markdown("<h3 style='color: #1E3A8A;'>Th√¥ng tin doanh nghi·ªáp</h3>", unsafe_allow_html=True)

        # Card th√¥ng tin c∆° b·∫£n
        st.markdown("<div class='card'>", unsafe_allow_html=True)

        # T√™n v√† MST
        col1, col2 = st.columns([2, 1])
        with col1:
            st.markdown(f"<h2 style='margin-bottom: 5px;'>{data.get('tennnt', 'N/A')}</h2>", unsafe_allow_html=True)
            st.markdown(f"<p style='color: #6B7280; margin-top: 0;'>M√£ s·ªë thu·∫ø: <b>{data.get('mst', 'N/A')}</b></p>", unsafe_allow_html=True)

        with col2:
            # Hi·ªÉn th·ªã tr·∫°ng th√°i v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng
            st.markdown(f"<div style='text-align: right;'>", unsafe_allow_html=True)
            st.markdown(f"<p>Tr·∫°ng th√°i:</p>", unsafe_allow_html=True)
            st.markdown(f"<p class='{status_class}'>{status_icon} {status_desc}</p>", unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)

        # ƒê·ªãa ch·ªâ
        address_parts = []
        if data.get('dctsdchi'): address_parts.append(data.get('dctsdchi'))
        if data.get('dctsxaten'): address_parts.append(data.get('dctsxaten'))
        if data.get('dctshuyenten'): address_parts.append(data.get('dctshuyenten'))
        if data.get('dctstinhten'): address_parts.append(data.get('dctstinhten'))

        full_address = ", ".join([part for part in address_parts if part and part != 'N/A'])

        st.markdown(f"<p><b>ƒê·ªãa ch·ªâ:</b> {full_address}</p>", unsafe_allow_html=True)

        # C∆° quan thu·∫ø qu·∫£n l√Ω
        st.markdown(f"<p><b>C∆° quan thu·∫ø qu·∫£n l√Ω:</b> {data.get('tencqt', 'N/A')}</p>", unsafe_allow_html=True)

        # Lo·∫°i h√¨nh doanh nghi·ªáp
        business_type = f"{data.get('loainnt', '')} - {data.get('lnnt', '')}"
        st.markdown(f"<p><b>Lo·∫°i h√¨nh:</b> {business_type}</p>", unsafe_allow_html=True)

        st.markdown("</div>", unsafe_allow_html=True)

        # Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu c√≥
        if blacklist_info is not None:
            st.markdown("<div class='error-box'>", unsafe_allow_html=True)
            st.markdown(f"<h4 style='color: #DC2626; margin-top: 0;'>‚õî C·∫£nh b√°o r·ªßi ro</h4>", unsafe_allow_html=True)
            st.markdown(f"<p>{blacklist_info['Note']}</p>", unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)

        # Th√¥ng tin chi ti·∫øt
        with st.expander("Xem th√¥ng tin chi ti·∫øt"):
            # B·∫£ng th√¥ng tin chi ti·∫øt
            df2 = pd.DataFrame({
                'Th√¥ng tin': [
                    'M√£ CQT',
                    'T√™n CQT',
                    'Lo·∫°i NNT',
                    'LNNT',
                    'ƒê·ªãa ch·ªâ',
                    'T·ªânh/TP',
                    'Qu·∫≠n/Huy·ªán',
                    'Ph∆∞·ªùng/X√£'
                ],
                'Gi√° tr·ªã': [
                    data.get('macqt', 'N/A'),
                    data.get('tencqt', 'N/A'),
                    data.get('loainnt', 'N/A'),
                    data.get('lnnt', 'N/A'),
                    data.get('dctsdchi', 'N/A'),
                    data.get('dctstinhten', 'N/A'),
                    data.get('dctshuyenten', 'N/A'),
                    data.get('dctsxaten', 'N/A')
                ]
            })
            st.dataframe(
                df2,
                hide_index=True,
                column_config={
                    'Th√¥ng tin': st.column_config.TextColumn('Th√¥ng tin', width='medium'),
                    'Gi√° tr·ªã': st.column_config.TextColumn('Gi√° tr·ªã', width='large')
                }
            )

def create_sample_excel():
    """T·∫°o file m·∫´u Excel"""
    # T·∫°o DataFrame m·∫´u
    sample_df = pd.DataFrame({
        'MST': ['0123456789', '9876543210'],
        'T√™n DN': ['C√¥ng ty A', 'C√¥ng ty B']
    })

    # T·∫°o buffer ƒë·ªÉ l∆∞u file Excel
    buffer = BytesIO()

    # T·∫°o ExcelWriter v·ªõi engine='xlsxwriter' ƒë·ªÉ c√≥ th·ªÉ format
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        sample_df.to_excel(writer, index=False, sheet_name='Sheet1')

        # L·∫•y workbook v√† worksheet ƒë·ªÉ format
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']

        # Format c·ªôt MST l√† text
        text_format = workbook.add_format({'num_format': '@'})
        worksheet.set_column('A:A', 15, text_format)  # C·ªôt A (MST)
        worksheet.set_column('B:B', 40)  # C·ªôt B (T√™n DN)

        # Th√™m ghi ch√∫ cho c·ªôt MST
        worksheet.write_comment('A1', 'ƒê·ªãnh d·∫°ng c·ªôt n√†y l√† Text ƒë·ªÉ gi·ªØ s·ªë 0 ·ªü ƒë·∫ßu MST')

    buffer.seek(0)
    return buffer

def create_excel_result(status_df, blacklist_df, result_df):
    """T·∫°o file Excel k·∫øt qu·∫£"""
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        # Sheet th·ªëng k√™
        status_df.to_excel(writer, sheet_name='Th·ªëng k√™ tr·∫°ng th√°i', index=False)
        blacklist_df.to_excel(writer, sheet_name='Th·ªëng k√™ r·ªßi ro', index=False)

        # Sheet k·∫øt qu·∫£ chi ti·∫øt
        result_df.to_excel(writer, sheet_name='K·∫øt qu·∫£ chi ti·∫øt', index=False)

        # Format c√°c sheet
        workbook = writer.book

        # Format sheet k·∫øt qu·∫£ chi ti·∫øt
        worksheet = writer.sheets['K·∫øt qu·∫£ chi ti·∫øt']
        text_format = workbook.add_format({'num_format': '@'})
        worksheet.set_column('A:A', 15, text_format)  # MST
        worksheet.set_column('B:B', 40)  # T√™n DN
        worksheet.set_column('C:C', 30)  # Tr·∫°ng th√°i
        worksheet.set_column('D:D', 20)  # Trong danh s√°ch ƒëen
        worksheet.set_column('E:E', 50)  # Ghi ch√∫ c·∫£nh b√°o

    buffer.seek(0)
    return buffer

def main():
    st.set_page_config(
        page_title="Tra c·ª©u Doanh nghi·ªáp",
        page_icon="üè¢",
        layout="wide",
        initial_sidebar_state="collapsed"
    )

    # Load CSS
    load_css()

    # Header v·ªõi logo v√† ti√™u ƒë·ªÅ
    col1, col2 = st.columns([1, 5])

    with col1:
        # Logo placeholder - c√≥ th·ªÉ thay b·∫±ng logo th·ª±c t·∫ø
        st.image("https://img.icons8.com/color/96/000000/company.png", width=80)

    with col2:
        st.title("H·ªá th·ªëng Tra c·ª©u Doanh nghi·ªáp")
        st.markdown("<p style='color: #6B7280; margin-top: -15px; font-family: Nunito, sans-serif;'>Ki·ªÉm tra th√¥ng tin v√† tr·∫°ng th√°i doanh nghi·ªáp theo m√£ s·ªë thu·∫ø</p>", unsafe_allow_html=True)

    # T·∫°o 2 tab v·ªõi giao di·ªán hi·ªán ƒë·∫°i
    tab1, tab2 = st.tabs(["Tra c·ª©u ƒë∆°n l·∫ª", "Tra c·ª©u h√†ng lo·∫°t"])

    with tab1:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("<h3 style='color: #1E3A8A; font-family: Poppins, sans-serif; font-weight: 600;'>Tra c·ª©u theo M√£ s·ªë thu·∫ø</h3>", unsafe_allow_html=True)

        # Form tra c·ª©u v·ªõi giao di·ªán ƒë·∫πp h∆°n
        mst_input = st.text_input("Nh·∫≠p MST c·∫ßn tra c·ª©u:", placeholder="V√≠ d·ª•: 0123456789")
        search_button = st.button("Tra c·ª©u", key="single_search_button")

        st.markdown("</div>", unsafe_allow_html=True)

        # X·ª≠ l√Ω tra c·ª©u
        if search_button and mst_input:
            with st.spinner('Tra c·ª©u th√¥ng tin...'):
                result = lookup_business(mst_input)
                display_business_info(result)

    with tab2:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("<h3 style='color: #1E3A8A; font-family: Poppins, sans-serif; font-weight: 600;'>Tra c·ª©u h√†ng lo·∫°t</h3>", unsafe_allow_html=True)

        # H∆∞·ªõng d·∫´n ng·∫Øn g·ªçn
        st.markdown("<p style='font-family: Nunito, sans-serif;'>T·∫£i file m·∫´u Excel, ƒëi·ªÅn danh s√°ch MST, sau ƒë√≥ upload v√† tra c·ª©u.</p>", unsafe_allow_html=True)

        # Card cho file m·∫´u v√† upload
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("<h4 style='color: #1E3A8A; font-family: Poppins, sans-serif; font-weight: 500;'>B∆∞·ªõc 1: T·∫£i file m·∫´u</h4>", unsafe_allow_html=True)
            excel_buffer = create_sample_excel()
            st.download_button(
                "üì• Download file m·∫´u Excel",
                excel_buffer,
                "mau_tra_cuu.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        # Upload file
        with col2:
            st.markdown("<h4 style='color: #1E3A8A; font-family: Poppins, sans-serif; font-weight: 500;'>B∆∞·ªõc 2: Upload file ƒë√£ ƒëi·ªÅn</h4>", unsafe_allow_html=True)
            uploaded_file = st.file_uploader("Ch·ªçn file Excel", type=['xlsx'], label_visibility="collapsed")

        st.markdown("</div>", unsafe_allow_html=True)

        # X·ª≠ l√Ω file upload
        if uploaded_file is not None:
            try:
                # ƒê·ªçc file v·ªõi dtype ƒë·ªÉ ch·ªâ ƒë·ªãnh MST l√† ki·ªÉu string
                df = pd.read_excel(
                    uploaded_file,
                    dtype={'MST': str},  # ƒê·∫£m b·∫£o MST ƒë∆∞·ª£c ƒë·ªçc nh∆∞ text
                    engine='openpyxl'
                )

                # Ki·ªÉm tra c·ªôt MST
                if 'MST' not in df.columns:
                    st.error("File ph·∫£i c√≥ c·ªôt 'MST'")
                else:
                    # Chu·∫©n h√≥a MST: th√™m s·ªë 0 v√†o ƒë·∫ßu n·∫øu ƒë·ªô d√†i < 10
                    df['MST'] = df['MST'].apply(lambda x: str(x).zfill(10))

                    # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng v√† n√∫t tra c·ª©u
                    st.markdown(f"<p style='font-family: Nunito, sans-serif;'>S·ªë l∆∞·ª£ng doanh nghi·ªáp c·∫ßn tra c·ª©u: <b>{len(df)}</b></p>", unsafe_allow_html=True)
                    search_all_button = st.button("Tra c·ª©u t·∫•t c·∫£", key="batch_search_button")

                    # X·ª≠ l√Ω tra c·ª©u
                    if search_all_button:
                        results = []
                        progress_bar = st.progress(0)
                        status_text = st.empty()

                        # Tra c·ª©u t·ª´ng MST
                        for i, mst in enumerate(df['MST']):
                            status_text.text(f"ƒêang tra c·ª©u MST {mst} ({i+1}/{len(df)})")

                            # ƒê·∫£m b·∫£o MST l√† string v√† c√≥ ƒë·ªß 10 ch·ªØ s·ªë
                            mst = str(mst).zfill(10)
                            result = lookup_business(mst)
                            if result:
                                status_code = result.get('tthai', 'N/A')
                                status_desc = get_status_description(status_code)

                                # Ki·ªÉm tra blacklist
                                db = BusinessDatabase()
                                blacklist_info = db.get_blacklist_info(mst)
                                blacklist_status = "C√≥ ‚õî" if blacklist_info else "Kh√¥ng"
                                blacklist_note = blacklist_info['Note'] if blacklist_info else ""

                                results.append({
                                    'MST': mst,  # S·ª≠ d·ª•ng MST ƒë√£ chu·∫©n h√≥a
                                    'T√™n DN': result.get('tennnt', 'N/A'),
                                    'Tr·∫°ng th√°i': f"{status_desc}",
                                    'Trong danh s√°ch ƒëen': blacklist_status,
                                    'Ghi ch√∫ c·∫£nh b√°o': blacklist_note
                                })

                            # C·∫≠p nh·∫≠t progress bar
                            progress_bar.progress((i + 1) / len(df))

                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        if results:
                            st.success("‚úÖ ƒê√£ tra c·ª©u xong!")
                            result_df = pd.DataFrame(results)

                            # ƒê·∫£m b·∫£o MST trong k·∫øt qu·∫£ ƒë∆∞·ª£c format ƒë√∫ng
                            result_df['MST'] = result_df['MST'].astype(str).apply(lambda x: x.zfill(10))

                            # Card k·∫øt qu·∫£
                            st.markdown("<div class='card'>", unsafe_allow_html=True)
                            st.markdown("<h3 style='color: #1E3A8A;'>K·∫øt qu·∫£ tra c·ª©u</h3>", unsafe_allow_html=True)

                            # Th·ªëng k√™ k·∫øt qu·∫£
                            st.markdown("<h4>Th·ªëng k√™ k·∫øt qu·∫£ tra c·ª©u:</h4>", unsafe_allow_html=True)
                            col1, col2 = st.columns(2)

                            with col1:
                                # Th·ªëng k√™ theo tr·∫°ng th√°i
                                st.markdown("<div class='info-box'>", unsafe_allow_html=True)
                                st.markdown("<h5 style='margin-top: 0;'>Theo tr·∫°ng th√°i:</h5>", unsafe_allow_html=True)
                                status_counts = result_df['Tr·∫°ng th√°i'].value_counts()
                                status_df = pd.DataFrame({
                                    'Tr·∫°ng th√°i': status_counts.index,
                                    'S·ªë l∆∞·ª£ng': status_counts.values
                                })
                                st.dataframe(
                                    status_df,
                                    hide_index=True,
                                    column_config={
                                        'Tr·∫°ng th√°i': st.column_config.TextColumn('Tr·∫°ng th√°i', width='large'),
                                        'S·ªë l∆∞·ª£ng': st.column_config.NumberColumn('S·ªë l∆∞·ª£ng', width='small')
                                    }
                                )
                                st.markdown("</div>", unsafe_allow_html=True)

                            with col2:
                                # Th·ªëng k√™ theo danh s√°ch ƒëen
                                st.markdown("<div class='info-box'>", unsafe_allow_html=True)
                                st.markdown("<h5 style='margin-top: 0;'>Theo danh s√°ch r·ªßi ro:</h5>", unsafe_allow_html=True)
                                blacklist_counts = result_df['Trong danh s√°ch ƒëen'].value_counts()

                                # T·∫°o DataFrame v·ªõi t√™n r√µ r√†ng h∆°n
                                blacklist_df = pd.DataFrame({
                                    'Tr·∫°ng th√°i': [
                                        'C√≥ trong danh s√°ch r·ªßi ro' if x == 'C√≥ ‚õî' else 'Kh√¥ng trong danh s√°ch r·ªßi ro'
                                        for x in blacklist_counts.index
                                    ],
                                    'S·ªë l∆∞·ª£ng': blacklist_counts.values
                                })

                                # S·∫Øp x·∫øp ƒë·ªÉ "C√≥ trong danh s√°ch" hi·ªÉn th·ªã tr∆∞·ªõc
                                blacklist_df = blacklist_df.sort_values('Tr·∫°ng th√°i', ascending=False)

                                st.dataframe(
                                    blacklist_df,
                                    hide_index=True,
                                    column_config={
                                        'Tr·∫°ng th√°i': st.column_config.TextColumn('Tr·∫°ng th√°i', width='large'),
                                        'S·ªë l∆∞·ª£ng': st.column_config.NumberColumn(
                                            'S·ªë l∆∞·ª£ng',
                                            width='small',
                                            help="S·ªë l∆∞·ª£ng doanh nghi·ªáp"
                                        )
                                    }
                                )
                                st.markdown("</div>", unsafe_allow_html=True)

                            # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
                            st.markdown("<h4>K·∫øt qu·∫£ chi ti·∫øt:</h4>", unsafe_allow_html=True)
                            st.markdown("<div class='dataframe-container'>", unsafe_allow_html=True)
                            st.dataframe(
                                result_df,
                                column_config={
                                    'MST': st.column_config.TextColumn('MST', width='medium'),
                                    'T√™n DN': st.column_config.TextColumn('T√™n DN', width='large'),
                                    'Tr·∫°ng th√°i': st.column_config.TextColumn('Tr·∫°ng th√°i', width='large'),
                                    'Trong danh s√°ch ƒëen': st.column_config.TextColumn('Trong danh s√°ch ƒëen', width='medium'),
                                    'Ghi ch√∫ c·∫£nh b√°o': st.column_config.TextColumn('Ghi ch√∫ c·∫£nh b√°o', width='large')
                                }
                            )
                            st.markdown("</div>", unsafe_allow_html=True)

                            # N√∫t download k·∫øt qu·∫£ Excel
                            excel_result = create_excel_result(status_df, blacklist_df, result_df)
                            st.download_button(
                                "üì• Download k·∫øt qu·∫£ (Excel)",
                                excel_result,
                                "ket_qua_tra_cuu.xlsx",
                                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )

                            st.markdown("</div>", unsafe_allow_html=True)

            except Exception as e:
                st.error(f"L·ªói khi ƒë·ªçc file: {str(e)}")

    # Footer
    st.markdown("<div class='footer'>", unsafe_allow_html=True)
    st.markdown("<span style='font-family: Nunito, sans-serif;'>¬© C√¥ng ty TNHH Ki·ªÉm to√°n IVC |2025 H·ªá th·ªëng Tra c·ª©u Doanh nghi·ªáp | Phi√™n b·∫£n 2.0</span>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
